#!/bin/bash

#/ NAME
#/     build -- builds macports, ports
#/           -- builds static site using jekyll
#/
#/ SYNOPSIS
#/     build macports|ports
#/     build site

# figure out the project root under which bin, lib live
shome="$(cd -P -- "$(dirname -- "$0")/.." && pwd -P)"

# load a meat library
source "$shome/libexec/_jason" "$@"

# entry point
function mpmain {
  setup_macports
  build_macports
}

function setup_macports {
  mkdir -p "$MACPORTS"

  if [[ ! -d "$shome/vault" ]]; then
    mkdir -p $shome/vault
  fi

  mkdir -p "$shome/vault/macports/distfiles"

  local dir_software="${MACPORTS//\//_}"
  mkdir -p "$shome/vault/macports/software/$dir_software"
  ln -vnfs "$shome/vault/macports/software/$dir_software" "$MACPORTS/software"
}

function build_macports {
  rm -rf $shome/sources/rsync.macports.org/release/tarballs/base
  (cd $shome/sources && git checkout rsync.macports.org/release/tarballs/base)

  unset CC CXX

  if [[ "$FLAGS_clean" = "$FLAGS_TRUE" ]]; then
    rm -rf "$MACPORTS"
    hash -r
  fi

  pushd $shome/sources/rsync.macports.org/release/tarballs/base
  ./configure --prefix="$MACPORTS" --with-install-user=$(id -u -n) --with-install-group=$(id -g -n) --with-no-root-privileges
  make -j "$FLAGS_cpus"
  make install
  hash -r
  popd

  export MACPORTS_BUILD="$shome"
  local template
  for template in $(find $shome/etc -name '*.template'); do
    perl -pe 's{\$\$\$MACPORTS\$\$\$}{$ENV{"MACPORTS"}}eg; s{\$\$\$MACPORTS_BUILD\$\$\$}{$ENV{"MACPORTS_BUILD"}}eg' "$template" > "$MACPORTS/etc/macports/$(basename "${template%.template}")"
  done
  unset MACPORTS_BUILD

  rm -rf "$MACPORTS/var/macports/distfiles" "$MACPORTS/var/macports/sources"
  ln -s "$shome/vault/macports/distfiles" "$MACPORTS/var/macports/distfiles"
  ln -s "$shome/sources" "$MACPORTS/var/macports/sources"
}

require macports "$BASH_SOURCE" "$@"
